name: AutoCodeSync

on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 午夜运行
  workflow_dispatch: # 允许手动触发

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      # 检出目标仓库
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}

      # 配置 Git
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      # 获取源仓库最新提交
      - name: Get source repository latest commit
        run: |
          git ls-remote https://github.com/Big-Yellow-J/Big-Yellow-J.github.io.git master | awk '{print $1}' > current_commit.txt
          if [ ! -s current_commit.txt ]; then
            echo "Error: Failed to fetch source commit. Check if 'master' branch exists."
            exit 1
          fi
          echo "Current source commit: $(cat current_commit.txt)"

      # 检查更新
      - name: Check for updates
        id: check_updates
        run: |
          if [ -f .github/last_commit.txt ]; then
            LAST_COMMIT=$(cat .github/last_commit.txt)
            CURRENT_COMMIT=$(cat current_commit.txt)
            if [ "$LAST_COMMIT" != "$CURRENT_COMMIT" ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
          echo "has_changes: $(cat $GITHUB_OUTPUT | grep has_changes)"

      # 同步 code/Python 目录
      - name: Sync code/Python directory
        if: steps.check_updates.outputs.has_changes == 'true'
        run: |
          # 添加源仓库并获取
          git remote add source https://github.com/Big-Yellow-J/Big-Yellow-J.github.io.git || true
          git fetch source

          # 重置到远程 main 分支
          git checkout main
          git fetch origin
          git reset --hard origin/main

          # 调试：列出源仓库 code/Python 内容
          echo "Listing code/Python contents in source/master:"
          git ls-tree -r source/master code/Python || echo "No code/Python directory found"

          # 检查 code/Python 是否存在
          if ! git ls-tree source/master code/Python > /dev/null 2>&1; then
            echo "Error: code/Python directory does not exist in source/master."
            exit 1
          fi

          # 清空目标仓库根目录（保留 .git 和 .github）
          find . -maxdepth 1 -not -name '.' -not -name '..' -not -name '.git' -not -name '.github' -exec rm -rf {} \;

          # 同步 code/Python 内容到根目录
          git checkout source/master -- code/Python
          mv code/Python/* ./ 2>/dev/null || echo "No files to move from code/Python"
          rm -rf code

          # 更新提交记录
          mkdir -p .github
          cat current_commit.txt > .github/last_commit.txt
          git add .

          # 调试：检查更改状态
          echo "Git status before commit:"
          git status

          # 强制提交
          echo "Committing changes..."
          git commit -m "Auto-sync code/Python from source (commit $(cat current_commit.txt))" || echo "No changes to commit"

      # 强制推送
      - name: Force push changes
        if: steps.check_updates.outputs.has_changes == 'true'
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${ACCESS_TOKEN}@github.com/shangxiaaabb/ProjectCode.git
          git fetch origin
          echo "Before push - Local HEAD: $(git rev-parse HEAD)"
          echo "Before push - Remote origin/main: $(git rev-parse origin/main)"
          git push origin main --force
          echo "Push completed. Remote HEAD: $(git ls-remote origin main | awk '{print $1}')"
